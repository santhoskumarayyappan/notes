## arraycopy - copies content from an array to another which already initialized

public static void arraycopy(Object src, int srcPos, Object dest, 
                             int destPos, int length)
                             
int a[] = { 1, 8, 3 };
int b[] = new int[a.length];
System.arraycopy(a, 0, b, 0, 3);


## copyOfRange - returns copy of original[from .. to)

public static int[] copyOfRange(int[] original, int from, int to)

int a[] = { 1, 8, 3, 5, 9, 10 };
int b[] = Arrays.copyOfRange(a, 2, 6);


## Map.forEach - Traversing Map

 Map<String,String> gfg = new HashMap<String,String>();
 gfg.forEach((k,v) -> System.out.println("Key = "
        + k + ", Value = " + v));
        
      
## IntStream.range - Traversing Array 

int[] runs = IntStream.range(0, arr.length)
                          .filter(i -> i == 0 || arr[i-1] > arr[i])
                          .toArray();

## Java compare Large String Integer values "554", "8976" (descending)

private int compare(String p1, String p2) {
        return p1.length() == p2.length() ? p2.compareTo(p1) : Integer.compare(p2.length(), p1.length());
    }
    
    
## Java String traversal

for (int i = 0; i < str.length(); i++) {
    if (Character.isAlphabetic(str.charAt(i)) {
          System.out.println(" is an alphabet.");
          System.out.println(Character.toLowerCase(str.charAt(i));
        }
    if (Character.isLetterOrDigit(str.charAt(i)) {
          System.out.println(" is an Letter/Digit.");
        }  
   }
   
   
## Set Intersection

set1.retainAll(set2);


## Pair
javafx.util package;
Pair<Integer, String> pair = new Pair<>(1, "One");
Integer key = pair.getKey();
String value = pair.getValue();

## LinkedHashMap LRU cache 
## A special constructor is provided to create a linked hash map whose order of iteration is the order in which its entries were last accessed, 
## from least-recently accessed to most-recently (access-order).

## Constructs an empty LinkedHashMap instance with the specified initial capacity, load factor(0.75 default) and ordering mode (accessOrder - True, insertionOrder - False)
## Same Key reinserting wont change insertionOrder
LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder)

## Returns true if this map should remove its eldest entry.
## This method is invoked by put and putAll after inserting a new entry into the map.
protected boolean removeEldestEntry(Map.Entry eldest) {
    return size() > MAX_ENTRIES;
}


## Deleting items while iterating
## next() should be called everytime before remove() to remove current element or else exception thrown

Iterator i = (anyCollection).iterator();
while (iterator.hasNext()) {
  iterator.next();
  iterator.remove();
}


## merge(key, defaultValue, lambda) in Map
public static void incrementPageVisit(Map<String, Integer> pageVisits, String page) {
    pageVisits.merge(page, 1, (oldValue, value) â€‘> oldValue + value); 
}


## ThreadMXBean
ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();
long[] monitorDeadlockedThreads = threadMXBean.findMonitorDeadlockedThreads();
ThreadInfo[] threadInfo = threadMXBean.getThreadInfo(monitorDeadlockedThreads);

for (ThreadInfo info : threadInfo) {
    System.out.println(info.toString());
}

## AutoBoxing Caches

If the value p being boxed is true, false, 
a byte, or a char in the range \u0000 to \u007f, or an int or short number between -128 and 127 (inclusive),
then let r1 and r2 be the results of any two boxing conversions of p. It is always the case that r1 == r2.

Integer b2=128;
Integer b3=128;
System.out.println(b2==b3); // false

Integer b2=127;
Integer b3=127;
System.out.println(b2==b3); // true

Integer b2 =Integer.valueOf(127)

public static Integer valueOf(int i) {
    if(i >= -128 && i <= IntegerCache.high)
        return IntegerCache.cache[i + 128];
    else
        return new Integer(i);
}


## StringPool

Thanks to the immutability of Strings in Java, the JVM can optimize the amount of memory allocated for them 
by storing only one copy of each literal String in the pool. This process is called interning.

String first = "Baeldung"; 
String second = "Baeldung"; 
System.out.println(first == second); // True

String third = new String("Baeldung");
String fourth = new String("Baeldung"); 
System.out.println(third == fourth); // False

String fifth = "Baeldung";
String sixth = new String("Baeldung");
System.out.println(fifth == sixth); // False

## Frequency Map using Streams

Map<Integer, Long> counter = Arrays.stream(nums).boxed().collect(Collectors.groupingBy(e -> e, HashMap::new, Collectors.counting()));
        





