## arraycopy - copies content from an array to another which already initialized

public static void arraycopy(Object src, int srcPos, Object dest, 
                             int destPos, int length)
                             
int a[] = { 1, 8, 3 };
int b[] = new int[a.length];
System.arraycopy(a, 0, b, 0, 3);


## copyOfRange - returns copy of original[from .. to)

public static int[] copyOfRange(int[] original, int from, int to)

int a[] = { 1, 8, 3, 5, 9, 10 };
int b[] = Arrays.copyOfRange(a, 2, 6);


## Map.forEach - Traversing Map

 Map<String,String> gfg = new HashMap<String,String>();
 gfg.forEach((k,v) -> System.out.println("Key = "
        + k + ", Value = " + v));
        
      
## IntStream.range - Traversing Array 

int[] runs = IntStream.range(0, arr.length)
                          .filter(i -> i == 0 || arr[i-1] > arr[i])
                          .toArray();

## Java compare Large String Integer values "554", "8976" (descending)

private int compare(String p1, String p2) {
        return p1.length() == p2.length() ? p2.compareTo(p1) : Integer.compare(p2.length(), p1.length());
    }
    
    
## Java String traversal

for (int i = 0; i < str.length(); i++) {
    if (Character.isAlphabetic(str.charAt(i)) {
          System.out.println(" is an alphabet.");
          System.out.println(Character.toLowerCase(str.charAt(i));
        }
    if (Character.isLetterOrDigit(str.charAt(i)) {
          System.out.println(" is an Letter/Digit.");
        }  
   }

